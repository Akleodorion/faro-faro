// Mocks generated by Mockito 5.4.4 from annotations
// in faro_clean_tdd/test/features/tickets/presentation/providers/activate_ticket/state/activate_ticket_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

// Dart imports:
import 'dart:async' as _i5;

// Package imports:
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// Project imports:
import 'package:faro_faro/core/errors/failures.dart' as _i6;

import 'package:faro_faro/features/tickets/data/models/ticket_model.dart'
    as _i7;
import 'package:faro_faro/features/tickets/domain/repositories/ticket_repository.dart'
    as _i2;
import 'package:faro_faro/features/tickets/domain/usecases/activate_ticket_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTicketRepository_0 extends _i1.SmartFake
    implements _i2.TicketRepository {
  _FakeTicketRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ActivateTicketUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivateTicketUsecase extends _i1.Mock
    implements _i4.ActivateTicketUsecase {
  MockActivateTicketUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TicketRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeTicketRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.TicketRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> execute({
    required int? userId,
    required _i7.TicketModel? ticket,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #userId: userId,
            #ticket: ticket,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #userId: userId,
              #ticket: ticket,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}
