// Mocks generated by Mockito 5.4.3 from annotations
// in faro_clean_tdd/test/features/events/data/repositories/event_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:faro_clean_tdd/core/network/network_info.dart' as _i6;
import 'package:faro_clean_tdd/features/events/data/datasources/event_remote_data_source.dart'
    as _i3;
import 'package:faro_clean_tdd/features/events/data/models/event_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEventModel_0 extends _i1.SmartFake implements _i2.EventModel {
  _FakeEventModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EventRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventRemoteDatasource extends _i1.Mock
    implements _i3.EventRemoteDatasource {
  MockEventRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.EventModel>> fetchAllEvents() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllEvents,
          [],
        ),
        returnValue: _i4.Future<List<_i2.EventModel>>.value(<_i2.EventModel>[]),
      ) as _i4.Future<List<_i2.EventModel>>);

  @override
  _i4.Future<_i2.EventModel> postAnEvent({
    required _i2.EventModel? event,
    required _i5.File? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postAnEvent,
          [],
          {
            #event: event,
            #image: image,
          },
        ),
        returnValue: _i4.Future<_i2.EventModel>.value(_FakeEventModel_0(
          this,
          Invocation.method(
            #postAnEvent,
            [],
            {
              #event: event,
              #image: image,
            },
          ),
        )),
      ) as _i4.Future<_i2.EventModel>);

  @override
  _i4.Future<_i2.EventModel> updateAnEvent({
    required _i2.EventModel? event,
    required _i5.File? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAnEvent,
          [],
          {
            #event: event,
            #image: image,
          },
        ),
        returnValue: _i4.Future<_i2.EventModel>.value(_FakeEventModel_0(
          this,
          Invocation.method(
            #updateAnEvent,
            [],
            {
              #event: event,
              #image: image,
            },
          ),
        )),
      ) as _i4.Future<_i2.EventModel>);

  @override
  _i4.Future<_i2.EventModel> activateAnEvent({required int? eventId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #activateAnEvent,
          [],
          {#eventId: eventId},
        ),
        returnValue: _i4.Future<_i2.EventModel>.value(_FakeEventModel_0(
          this,
          Invocation.method(
            #activateAnEvent,
            [],
            {#eventId: eventId},
          ),
        )),
      ) as _i4.Future<_i2.EventModel>);

  @override
  _i4.Future<_i2.EventModel> closeAnEvent({required int? eventId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #closeAnEvent,
          [],
          {#eventId: eventId},
        ),
        returnValue: _i4.Future<_i2.EventModel>.value(_FakeEventModel_0(
          this,
          Invocation.method(
            #closeAnEvent,
            [],
            {#eventId: eventId},
          ),
        )),
      ) as _i4.Future<_i2.EventModel>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> getConnexionStatuts() => (super.noSuchMethod(
        Invocation.method(
          #getConnexionStatuts,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
