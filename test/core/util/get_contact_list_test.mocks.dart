// Mocks generated by Mockito 5.4.3 from annotations
// in faro_clean_tdd/test/core/util/get_contact_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:contacts_service/contacts_service.dart' as _i6;
import 'package:faro_clean_tdd/core/util/contact_service.dart' as _i5;
import 'package:faro_clean_tdd/core/util/permission_requester.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PermissionRequester].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionRequester extends _i1.Mock
    implements _i2.PermissionRequester {
  MockPermissionRequester() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.PermissionStatus> requestContactPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #requestContactPermission,
          [],
        ),
        returnValue:
            _i3.Future<_i4.PermissionStatus>.value(_i4.PermissionStatus.denied),
      ) as _i3.Future<_i4.PermissionStatus>);
}

/// A class which mocks [ContactService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactService extends _i1.Mock implements _i5.ContactService {
  MockContactService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.Contact>> callContactService() => (super.noSuchMethod(
        Invocation.method(
          #callContactService,
          [],
        ),
        returnValue: _i3.Future<List<_i6.Contact>>.value(<_i6.Contact>[]),
      ) as _i3.Future<List<_i6.Contact>>);
}
